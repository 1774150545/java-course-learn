<html><!-- #BeginTemplate "/Templates/module.dwt" --><!-- DW6 -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>  
    设计模式之Composite 组成模式　树模式
      </title>
<!-- #EndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link href="../jdon.css" rel="stylesheet" type="text/css">
<link rel="shortcut icon" href="../favicon.ico">
<style type="text/css"></style>
</head>
<body bgcolor="#dddddd" text="#000000">
 <table width="750" border="0" align="center" cellpadding="0" cellspacing="0">
          <tr> 
            <td width="120" height="98" bgcolor="#FFFFFF"  rowspan="3" class="dixian"> 
              <div align="center"><img src="../images/newlogo.gif" width="80" height="80" border="0"></div></td>
            <td height="72" colspan="7" valign="bottom" bgcolor="#CAC9BB"> 
              <table width="100%" border="0" align="right" cellpadding="2" cellspacing="2">
                <tr> 
                  <td   align="right" valign="bottom"> <table width="100%" height="1" border="0" cellpadding="0" cellspacing="0" bgcolor="#555555">
                      <td></td>
                      </tr>
                    </table></td>
                  <td width="200" align="right"><span class="small"><font color="#555555">J道：解惑之道,企业信息化解决之道</font></span></td>
                </tr>
              </table></td>
          </tr>
          <tr> 
		    <td>
			<table cellpadding="0" cellspacing="1">
                <tr>
			            <td height="26" bgcolor="#707070" width="222">&nbsp;</td>
            <td height="26" width="70" bgcolor="#707070" class="unnamed2"> <div align="center"><a href="http://www.jdon.com/index.html" class="a03">首&nbsp;&nbsp;&nbsp;&nbsp;页</a></div></td>
            <td height="26" width="70" bgcolor="#707070" class="unnamed2"> <div align="center"><a href="http://www.jdon.com/design.htm" class="a03">设计研究</a></div></td>
            <td height="26" width="70" bgcolor="#707070" class="unnamed2"> <div align="center"><a href="http://www.jdon.com/product.htm" class="a03">构件产品</a></div></td>			
            <td height="26" width="70" bgcolor="#707070" class="unnamed2"> <div align="center"><a href="http://www.jdon.com/trainning.htm" class="a03">培训咨询</a></div></td>
            <td height="26" width="70" bgcolor="#707070"> <div align="center" class="unnamed2"><a href="http://www.jdon.com/opensource.htm" class="a03"> 开源项目</a></div></td>
            <td height="26" width="70" bgcolor="#707070"> <div align="center" class="unnamed2"><a href="http://www.jdon.com/jive/index.jsp"  class="a03">论坛</a></div></td>

			</tr></table>
			</td>
          </tr>
</table>

<table width="750" border="0" cellspacing="0" cellpadding="0" align="center">

  <tr> 
    <td height="11" colspan="7" bgcolor="#FFFFFF" class="bianxian"> 
      <table width="100%" border="0" cellspacing="0" cellpadding="0" height="1" bordercolor="#000000">
        <tr> 
          <td> 
            <table width="100%" border="0" cellspacing="0" cellpadding="0" height="2" bgcolor="#000000">
              <tr> 
                <td></td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    
    <td bgcolor="#FFFFFF"  valign="top">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr> 
          <td width="120" valign="top"  bgcolor="#FFFFD7"><table width="100%" border="0" cellspacing="0" cellpadding="3" height="200" align="center">
            <tr>
              <td align="left" valign="top"><!-- #BeginEditable "Menu" --> <!-- #EndEditable --> </td>
            </tr>
            <tr>
              <td align="right">
				
                  <p><a href="http://www.jdon.com/trainning/jiaocheng.htm" target="_blank"><font color="#FF9999"><strong>在线教程</strong></font><br>
                        <font color="#555555">J道J2EE<br>
                        原创教程区</font></a></p>

				  <br>
<script type="text/javascript"><!--
google_ad_client = "pub-2190557680964036";
google_alternate_color = "FFFFD7";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_channel ="";
google_color_border = "FDFFCA";
google_color_bg = "FDFFCA";
google_color_link = "0000CC";
google_color_url = "008000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>

<p><a href="http://www.jdon.com/trainning/sh_trainning.htm" target="_blank"><img src="../images/hot.gif" width="100" height="10" border="0"> <br>
                        <font color="#FF9999"><strong>定期培训</strong></font><br>
                        <font color="#555555">J道J2EE实战</font></a></p>
                  <!-- #BeginEditable "Menu2" --> <!-- #EndEditable -->
                  <p><a href="http://www.jdon.com/aboutsite.htm" target="_blank"><font color="#555555">联系本站</font></a></p>
				  

              </td>
            </tr>
          </table> 
           
          </td>
		  <td width="1"  height="100%" >
<table height="100%" cellpadding="0" cellspacing="0" background="../images/blackpoint.gif" >
              <tr><td> <img name="" src="" width="1" height="1" alt="" ></td></tr></table>
		  </td > 
          <td valign="top" > 
            <table width="100%" border="0" cellspacing="2" cellpadding="2">
              <tr>
                <td><!-- #BeginEditable "main" --> 
      <h3 align="center">设计模式之Composite(组合)</h3>
      <p align="center"><a href="http://www.jdon.com/aboutme.htm">板桥里人</a> http://www.jdon.com
        2002/04/27（转载请保留）</p>
      <p align="center"><a href="../mybook/index.htm" target="_blank"><strong>模式实战书籍《Java实用系统开发指南》</strong></a></p>
      <p><b>Composite模式定义</b>:<br>
        将对象以树形结构组织起来,以达成“部分－整体” 的层次结构，使得客户端对单个对象和组合对象的使用具有一致性.</p>
      <p>Composite比较容易理解，想到Composite就应该想到树形结构图。组合体内这些对象都有共同接口,当组合体一个对象的方法被调用执行时，Composite将遍历(Iterator)整个树形结构,寻找同样包含这个方法的对象并实现调用执行。可以用牵一动百来形容。</p>
      <p>所以Composite模式使用到Iterator模式，和Chain of Responsibility模式类似。</p>
      <p><b>Composite好处</b>:<br>
        1.使客户端调用简单，客户端可以一致的使用组合结构或其中单个对象，用户就不必关系自己处理的是单个对象还是整个组合结构，这就简化了客户端代码。<br>
        2.更容易在组合体内加入对象部件. 客户端不必因为加入了新的对象部件而更改代码。</p>
      <p><b>如何使用Composite?</b><br>
        首先定义一个接口或抽象类，这是设计模式通用方式了，其他设计模式对接口内部定义限制不多，Composite却有个规定，那就是要在接口内部定义一个用于访问和管理Composite组合体的对象们（或称部件Component）.</p>
      <p>下面的代码是以抽象类定义，一般尽量用接口interface,</p>
      <table width="80%" border="0" cellspacing="3" cellpadding="3">
        <tr> 
          <td bgcolor="#CCCCCC">public abstract class Equipment<br>
            {<br>
            　　private String name; <br>
                        　　//实价<br>
            　　public abstract double netPrice();<br>
            　　//折扣价格<br>
            　　public abstract double discountPrice();<br>
            　　//增加部件方法　　<br>
            　　public boolean add(Equipment equipment) { return false; }<br>
            　　//删除部件方法<br>
            　　public boolean remove(Equipment equipment) { return false; }<br>
            　　//注意这里，这里就提供一种用于访问组合体类的部件方法。<br>
            　　public Iterator iter() { return null; }<br>
            　　<br>
            　　public Equipment(final String name) { this.name=name; }<br>
            } </td>
        </tr>
      </table>
      <p>抽象类Equipment就是Component定义，代表着组合体类的对象们,Equipment中定义几个共同的方法。</p>
      <table width="80%" border="0" cellspacing="3" cellpadding="3">
        <tr> 
          <td bgcolor="#CCCCCC">public class Disk extends Equipment<br>
            {<br>
            　　public Disk(String name) { super(name); }<br>
                        　　//定义Disk实价为1<br>
            　　public double netPrice() { return 1.; }<br>
            　　//定义了disk折扣价格是0.5 对折。<br>
            　　public double discountPrice() { return .5; }<br>
            }</td>
        </tr>
      </table>
      <p>Disk是组合体内的一个对象，或称一个部件，这个部件是个单独元素( Primitive)。<br>
        还有一种可能是，一个部件也是一个组合体，就是说这个部件下面还有'儿子'，这是树形结构中通常的情况，应该比较容易理解。现在我们先要定义这个组合体：</p>
      <table width="80%" border="0" cellspacing="3" cellpadding="3">
        <tr> 
          <td bgcolor="#CCCCCC"> 
            <p>abstract class CompositeEquipment extends Equipment<br>
              {<br>
              　　private int i=0; <br>
              　　//定义一个Vector 用来存放'儿子'<br>
              　　private Lsit equipment=new ArrayList();<br>
              <br>
              　　public CompositeEquipment(String name) { super(name); }<br>
              <br>
              　　public boolean add(Equipment equipment) { <br>
              　　　　 this.equipment.add(equipment); <br>
              　　　　 return true; <br>
              　　 }<br>
              <br>
              　　public double netPrice() <br>
              　　{<br>
              　　　　double netPrice=0.;<br>
              　　　　Iterator iter=equipment.iterator();<br>
              　　　　for(iter.hasNext())<br>
              　　　　　　netPrice+=((Equipment)iter.next()).netPrice();<br>
              　　　　return netPrice;<br>
              　　}<br>
              <br>
              　　public double discountPrice() <br>
              　　{<br>
              　　　　double discountPrice=0.;<br>
              　　　　Iterator iter=equipment.iterator();<br>
              　　　　for(iter.hasNext())<br>
              　　　　　　discountPrice+=((Equipment)iter.next()).discountPrice();<br>
              　　　　return discountPrice;<br>
              　　}<br>
              　　<br>
            </p>
            <p>　　//注意这里，这里就提供用于访问自己组合体内的部件方法。<br>
              　　//上面dIsk 之所以没有，是因为Disk是个单独(Primitive)的元素.<br>
              　　public Iterator iter()<br>
              　　{<br>
              　　　　return equipment.iterator() ;<br>
              　　{<br>
              　　//重载Iterator方法<br>
              　　 public boolean hasNext() { return i&lt;equipment.size(); }<br>
              　　//重载Iterator方法<br>
              　　 public Object next()<br>
              　　 {<br>
              　　　　if(hasNext())<br>
              　　　　　　 return equipment.elementAt(i++);<br>
              　　　　else <br>
              　　 　　 　 throw new NoSuchElementException();<br>
              　　 }<br>
              　　<br>
              <br>
              }</p>
          </td>
        </tr>
      </table>
      <p>上面CompositeEquipment继承了Equipment,同时为自己里面的对象们提供了外部访问的方法,重载了Iterator,Iterator是Java的Collection的一个接口，是Iterator模式的实现.</p>
      <p>我们再看看CompositeEquipment的两个具体类:盘盒Chassis和箱子Cabinet，箱子里面可以放很多东西，如底板，电源盒，硬盘盒等；盘盒里面可以放一些小设备，如硬盘 
        软驱等。无疑这两个都是属于组合体性质的。</p>
      <table width="80%" border="0" cellspacing="3" cellpadding="3">
        <tr> 
          <td bgcolor="#CCCCCC">public class Chassis extends CompositeEquipment<br>
            {<br>
            　　 public Chassis(String name) { super(name); }<br>
            　　 public double netPrice() { return 1.+super.netPrice(); }<br>
            　　 public double discountPrice() { return .5+super.discountPrice(); 
            }<br>
            } 
            <p>public class Cabinet extends CompositeEquipment<br>
              {<br>
              　　 public Cabinet(String name) { super(name); }<br>
              　　 public double netPrice() { return 1.+super.netPrice(); }<br>
              　　 public double discountPrice() { return .5+super.discountPrice(); 
              }<br>
              }</p>
          </td>
        </tr>
      </table>
      <p>至此我们完成了整个Composite模式的架构。</p>
      <p>我们可以看看客户端调用Composote代码:<br>
        <br>
        Cabinet cabinet=new Cabinet(&quot;Tower&quot;);<br>
        <br>
        Chassis chassis=new Chassis(&quot;PC Chassis&quot;);<br>
        //将PC Chassis装到Tower中 (将盘盒装到箱子里)<br>
        cabinet.add(chassis);<br>
        //将一个10GB的硬盘装到 PC Chassis (将硬盘装到盘盒里)<br>
        chassis.add(new Disk(&quot;10 GB&quot;));<br>
        <br>
        //调用 netPrice()方法;<br>
        System.out.println(&quot;netPrice=&quot;+cabinet.netPrice());<br>
        System.out.println(&quot;discountPrice=&quot;+cabinet.discountPrice());<br>
        <br>
      </p>
      <p>上面调用的方法netPrice()或discountPrice()，实际上Composite使用Iterator遍历了整个树形结构,寻找同样包含这个方法的对象并实现调用执行.</p>
      <p>Composite是个很巧妙体现智慧的模式，在实际应用中，如果碰到树形结构，我们就可以尝试是否可以使用这个模式。</p>
      <p>以论坛为例，一个版(forum)中有很多帖子(message),这些帖子有原始贴，有对原始贴的回应贴，是个典型的树形结构，那么当然可以使用Composite模式，那么我们进入Jive中看看，是如何实现的.</p>
      <p><b>Jive解剖</b><br>
        在Jive中 ForumThread是ForumMessages的容器container(组合体).也就是说，ForumThread类似我们上例中的 
        CompositeEquipment.它和messages的关系如图：<br>
        [thread]<br>
        　　 |- [message]<br>
        　　 |- [message]<br>
        　　 　　 |- [message]<br>
        　　 　　 |- [message]<br>
        　　 　　 　　 |- [message] </p>
      <p>我们在ForumThread看到如下代码：<br>
      </p>
      <table width="80%" border="0" cellspacing="3" cellpadding="3">
        <tr> 
          <td bgcolor="#CCCCCC"> public interface ForumThread {<br>
            　　 .... <br>
            　　 public void addMessage(ForumMessage parentMessage, ForumMessage 
            newMessage)<br>
            　　 　　 　　 throws UnauthorizedException; 
            <p> 　　 public void deleteMessage(ForumMessage message)<br>
              　　 　　 　　 throws UnauthorizedException;</p>
            <p> 　　<br>
              　　 public Iterator messages();<br>
              　　 　　 .... </p>
            <p>}</p>
          </td>
        </tr>
      </table>
      <p>类似CompositeEquipment, 提供用于访问自己组合体内的部件方法: 增加 删除 遍历.</p>
      <p>结合我的其他模式中对Jive的分析，我们已经基本大体理解了Jive论坛体系的框架，如果你之前不理解设计模式，而直接去看Jive源代码，你肯定无法看懂。</p>
      <p>:)</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <!-- #EndEditable --></td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="750" border="0" cellspacing="0" cellpadding="0" height="2" bgcolor="#000000"  align="center">
              <tr>
                <td></td>
              </tr>
            </table>
<table width="750" border="0" cellspacing="0" cellpadding="0" align="center">
<tr><td height="50" bgcolor="#CAC9BB" align="center">
<font color="#555555">(c) Copyright Jdon.com 2001-2004, All Right Reserved
<br>转载本站文章，请注明出处。</font> 
  </td>
</tr>
</table>

</body>
<!-- #EndTemplate --></html>
